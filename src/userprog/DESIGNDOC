		     +--------------------------+
		     |            OS            |
		     | PROJECT 2: USER PROGRAMS |
		     |     DESIGN DOCUMENT      |
		     +--------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Jonas Elflein <jonase@coli.uni-saarland.de> 7003378
Benno Krauß <bekr00003@stud.uni-saarland.de> 7009640

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We changed the method sig. -> setup_stack(void **esp, const char *arg_line).
For the argument parsing we do not use any data struct. Some result of this
we save
in the thread struct.

We saved the full command line in the thread struct (this will use for the exit
call etc.).

struct thread {
    …
    This is the full commandline.
    char program_name[32];
    …
}

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

1. We calculate the begin of the "address space" with the size of the
command line.
2. We align the stack
3. terminating sentinel
4. We use the strtok_r for parsing the tokens of the command line.
--> We put simul. the value and the address on the stack.
---> The order is correct because we use strtok_r in a loop and
put the addresses of the value to the correct postion, because we know the
begin of the "adress space". We decrease the amount of args
(adress space - argc) and then we have
the begin of the first arg (we increase this also in the loop).
5. argv pointer below the last address.
6. size blow argv pointer
7. argc and "return address" of the stack

>> How do you avoid overflowing the stack page?
We use a overflow function to detect it. It use the size of the data frame,
arc for the amount of pointers and 16bytes for return address, null sentinel etc.
It is not 100% correct, but it is very simple and fast.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r provides the same functionality as strtok,
just with a bit more work required on the caller side.
Strtok is problematic because it internally keeps track of the state between
repeated function invocations. When
multiple call sites call the function in a loop simultaneously, this would
cause a problem. Consider the case when
function A calls strtok in a loop and also calls functon B every time in
this loop, which itself calls strtok.
Strtok has no internal stack to keep separate states in this
scenario. When each caller passes a state variable,
as strtok_r requires, this problem is avoided.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) The shell can change its algorithm parsing the program name
and arguments depending on the preference of the user.

2) Less logic in the kernel reduces the potential attack surface
for security problems of the privileged kernel.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

changed structs
struct thread {
  ..
  char program_name[32];
  keeps the program name for each user program, used for exit message and more.

  struct semaphore process_load_sema;
  synchronization primitive to wait for process load, executable loading

  struct semaphore wait_sema;
  synchronization primitive to wait for process termination

  struct list file_descriptors;
  list of file descriptors which this process possesses

  struct list terminated_children;
  list of metadata for terminated child processes of this process

  tid_t parent;
  reference to parent process

  struct file *exec_file;
  open file for process executable. Used to hold write lock.
  ..
}


new structs
struct child_result { metadata about exited child process.
    tid_t pid;
    pid of this process

    int exit_code;
    exit code of this process

    struct list_elem elem;
    linked list element

    bool has_load_failed;
    used to indicate failed process loading
};

struct file_descriptor { maps file descriptor id to file pointer.
  int descriptor_id;
  struct file *f;
  struct list_elem list_elem;
};


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each process has their own descriptor table (actually a linked list of struct file_descriptor),
which maps file descriptors to file pointers.
File descriptors are unique within a process, not within the whole OS.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
We use the proposed put_user and get_user functions and logic in the page fault handler.
We added new functions readu and writeu to read and write larger chunks of memory from userland.
A page fault causes get_user to return -1, which causes readu to terminate the
user process with exit code -1


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The least amount is 1. The greatest is 4096. The get_user function reads only
1 byte. If you use the full size of the page, you use this function 4096 etc.

For a system call with 2 bytes of data it should be 2 inspections.

You can improve the speed (I didnt see any cache in the code),
if you use a cache, but on x86 the cache will flush after a context switch.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
Firstly we do the appropriate safety checks. Is the process actually a
 child of the current process etc.
Wait works by waiting on the semaphore wait_sema of the specific process
 to be waited on.
The exit system call handler (actually process_terminate called from syscall)
 puts the exit code into the corresponding
 struct child_result for this child process in the parents
 list. Then the semaphore is signaled.
 When execution returns to the wait syscall handler,
 it looks up this struct in the parents list
and returns the stored exit code.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
We use our functions readu and writeu to access user memory. Those
functions terminate the child process in the case of a page fault.
The normal process termination functions are called which will
clean up all opened files  and memory of the process.

In handler_fs_open, we carefully ordered our code so that all
necessary reads from userland are done before allocating memory
for the file handle struct. This way, the struct cannot be leaked
by an early function exit on a page fault. Either the function will
return early (process terminated), or no page faults occurred and the
resource allocation is fine without any leaks.

For temporary locks like the filesystem lock, it gets more tricky.
In the handler for SYS_WRITE, we lock the filesystem and
in a loop do file_read() followed by a write to the userland.
To unlock the file system lock even when a page fault occurs,
we introduced a special function try_writeu. It doesn't immediately
terminate the user process but instead returns false, which gives the
syscall handler the chance to unlock the lock before terminating
the user process.

if (!try_writeu(kbuffer + read_so_far, chunk_size, buffer))
{
sema_up(&file_sema);
process_terminate(thread_current(), -1, thread_current()
       ->program_name);
}

We only use the try_writeu function once because
it results in many if-branches that make the code harder to read.

In general, systems programmers often use the goto statement
to emulate try-catch style semantics from higher level languages.
We see the benefits but also worry about the error-prone nature
of it, see the famous "goto fail" bug from Apple a few years ago.

In our case there were not many temporary resources to worry about
so the approach explained above works well for this project.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We use a semaphore to wait. The syscall exec invokes
the process_execute function, after this it will check the pid. If the pid
is not -1, then it will wait until the process is finished loading
(using the thread.process_load_sema). After an unsuccessful load, start_process
will write the failure status to the parents list of child process metadata.
Then the semaphore will be unlocked.
After the exec syscall handler is done waiting on the semaphore, it will
check the child process metadata of the current process (=parent of child
process). If the load failed, it will return -1 to userland.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

A process can not call wait on a process before it exists. That is because
the exec syscall waits until the new process is fully loaded.
And a process is only allowed to wait on direct child processes.

To find out whether a child process or parent process still exists (is still
running / waiting), we disable interrupts for this short critical section
and iterate through the process list, looking for the process.

When the child thread still exists, we wait for it to finish using a
semaphore. In the function process_exit, called from the exit syscall handler
and error handling code, metadata like exit code of this process are put
into a list of the parent process (only if parent still exists).

After the waiting of the parent on its child is done, the
child process is no longer running and we just fetch the exit code from
the list of child process metadata from the parent.

The resources like file descriptors, terminated child process metadata
and memory are freed in process_exit. This is called from the exit syscall
handler and,
through a few function calls, in places where a process is terminated
for invalid pointers etc. That way no resources are leaked.

If the child process does not exist anymore but it is the first time that
P calls wait on that PID, then we just look up the exit code in P's
child process metadata list and return that, thereby also removing and
freeing that list element.
This works because wait may only be called once on a given process.

If P never calls wait on C, the child process metadata will be released
when the process of P is terminated.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We need to read user data for the sys. calls. The address of the pointer must
be in the user address space ( < PHYS_BASE), this will be checked in our
function readu. We copy the data
from the user space to the kernel space. We use the get_user/put_user
to avoid sig_faults and gracefully terminate the user process if necessary.
To make get_user and put_user work, we put the appropriate handling
code into the page fault handler (taken from course website).

We used this technique because it seemed to be the simplest approach
to implement.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We keep a list of file descriptors for every process.
We allocate a piece of memory (struct file_descriptor) for every
file descriptor and keep them in the linked list
thread.file_descriptors.

+ This approach has no fixed maximum number of file handles per process.
+ It is easy to modify the linked list, remove items in the middle etc.
+ No global sync needed as FD list is local to process
+ Easy to close all open files on process exit
- We use dynamic memory
- We cannot share file descriptors between processes because every
process has their own FD list

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change it. The reason is simplicity.
The disadvantage is that this mapping cannot allow multiple threads
per process.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Definitely

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
Would be nice to know how we should handle every failure case in syscalls
specifically. This was not on the course website but it turned out that the
tests require very specific error handling (return 0 in this case,
terminate the process with exit code -1 in another failure case).
It would have been easier if this info was available up front.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
The Multi-OOM test is quite hard to understand and also debug