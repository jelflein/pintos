		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Jonas Elflein <jonase@coli.uni-saarland.de> 7003378
Benno Krauß <bekr00003@stud.uni-saarland.de> 7009640

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    …
    uint8_t *user_esp; The user stackpointer, this is required for a syscall (growing the stack).
    struct hash spt; The supplemental page table
    …
}

This is a entry for the frametable (an array).

struct frame_entry {
    uint32_t page;
    struct thread *thread;
    uint8_t eviction_score; A score for the eviction policy.
};

The status for the spt.

enum spe_status {
    zeroes,
    frame_from_file,
    swap,
    frame,
    mapped_file,
    mapped_file_nowriteback
};

struct spt_entry {
    enum spe_status spe_status; // spt entry

    uint32_t vaddr; // Page address
    pid_t pid;

    The "size" of the page max. 4096 aka PGSIZE
    size_t  read_bytes;

    The swapslot is the slot on the block device.
    size_t swap_slot;

    If the page wirtable.
    bool writable;

    For the hash table.
    struct hash_elem elem;
};

in frame.c

The lock for the frame table.
struct lock lock;

The frame table as arrays of structs. Array index is (function of) physical frame address
struct frame_entry *frame_table;

The number of frames available right now
uint32_t num_frames_available = 0;
Total number of frames
uint32_t num_frames_total = 0;

The index of the page with the smallest eviction score (next page to evict).
int32_t index_of_smallest_score = -1;

#define ONE_MB (1024*1024)

A macro for the frame table. It compute the index with th address.
#define TABLE_INDEX(addr) (vtop(addr - ONE_MB) >> 12)
The reverse function.
#define ADDR_FROM_TABLE_INDEX(idx) (ptov(idx << 12) + ONE_MB)

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

if a page fault occurs, then we will lookup the fault address (rounded down to page address)
 in the spt (supplemental page table).
If the spt entry had the status "frame", then it is already mapped and no page fault would occur.
Depending on the spe_status we map in a zero page, code page or swap in the frame from swap device.

We use palloc to allocate a new physical frame and therefore palloc tells us the frame address.
We keep track of the allocated frames in the frame table, to know when we need to swap etc.

After the initial page fault, the address mapping is saved in the pagedir of the process.

The frame table is an array and the index of the frame entry is a function of the physical frame address.
The constant least-significant 12 bits are stripped and the offset of the 1MB magic number is removed
(taken from palloc implementation).

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We use only the accessed bit. In intervals, we check whether the accessed bits is 1.
If it is, we adjust the relevance of the page for our eviction score algorithm and reset the bit to 0.
We check the accessed bits of both the kernel virtual address and the user address.

pagedir_is_accessed(entry.thread->pagedir, kernel_addr)
|| pagedir_is_accessed(entry.thread->pagedir, v_addr)

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We use in frame.c a lock. It is designed as "monitor lock" in the method:
allocate_frame. This method allocates and manages the frame table (therefore frame table is thread safe)
Therefore whichever thread comes later will have to wait until the earlier thread
is done allocating a frame (possibly swapping out another frame).

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We choose an array of struct for the frame table, because the access is very fast.
We use (a function of) the physical address for the array index.
The array size fits one entry for every palloc page there can be,
which is determined by the RAM size and the palloc code.

For the SPT we choose a hash map. That is because a hash map has a very fast lookup time.
While an array is arguably even faster for lookups, the keys of the SPT entries
(the virtual addresses) are not "dense", a process usually has a huge virtual address space
but almost all addresses are not mapped.
That is to say there would be many empty slots in a huge array. The hash map does
not suffer from this problem of wasted space with sparse keys.

There is one SPT per process. But just one Frame Table for the whole OS, because the physical
memory is shared between all processes.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in swap.c

A bitmap to managing the swap slots.
struct bitmap *slots_occupied;

The swapping device / partition.
struct block *device;

enum spe_status {
    …
    swap
    …
};

struct spt_entry {
    …
    enum spe_status spe_status;

    The swapslot is the slot on the block device.
    size_t swap_slot;
    …
};

struct frame_entry {
    …
    uint8_t eviction_score; A score for the evicition policy.
    bool pinned; A bool indicating this frame may not be swapped out
    …
};

struct thread {
    …
    void *syscall_temp_buffer;
    …
}

in frame.c

A cached index of the frame with the lowest eviction system score.
Calculated on every run of the eviction algorithm "for free".
We use this if it is available, otherwise calculate the 
to-be-swapped-out entry on demand.
int32_t index_of_smallest_score = -1;

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We use the system timer interrupt (every 100 ticks) to calculate a score
 for every frame. If a frame has been
accessed, we increase the score. Otherwise we decrease it. We avoid over- and underflows. Every new entry
starts with 50, because the probability of using it is high. During
the calculation we save the frame with the index of smallest score
in a variable (it's basically for free,  we have to iterate over all used frames anyway). If more than one frame
is required between two timer interrupts, we search the frame array and find the frame with the lowest score again. During this (get_entry_to_evict)
we disabled the interrupts, because of side effects (same data structure used in timer interrupt).
We exclude pinned frames from the eviction. Pinned frames may not be swapped out. This mechanism is used to avoid having to lock the page table and the file system at the same time.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We do not have any "free command" as in dynamic memory (also no malloc) in pintos for the user process.
Therefore we focus on 1) process exit and 2) swapping and mmap
1)
In process_exit (process.c) we clear every frame table entry,
spt-entry or page dir entry correctly. We deallocate every page.
The frame table does not contains any page of process Q
after process_exit. Because we deallocate the page and we allocate
the new page with PAL_ZERO flag in P no previous data is inside (potential security risk).
We also clear every pd entry.
2)
As for swapping and mmap, assuming both processes are still alive:
When a frame is swapped out to the swap device or munmap'ed, we change the SPT entry to a status "swap"
or flush out the data to the file and remove the SPT entry completely.
Further we remove the vaddr -> paddr mapping from Q's page table.
The entry in the frame table is completely removed.
When P obtains that same frame again, a new frame table entry (at the same location) will
be created and a new pagedir entry will be added in P's page table.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

First of all, the fault address has to be in the user address space for obvious reasons.
    security check
    fault_addr < PHYS_BASE &&

Secondly, the fault address should be at an address higher than or equal to the stack address.
Then the address is by definition part of the stack.
    fault inside stack
    (fault_addr >= stack_pointer ||

And finally, there is one exception: Some x86 instructions may legitimately access memory slightly
above (lower addresses) the stack pointer (because they atomically grow the stack and write to it in one instruction).
These are namingly PUSH, CALL and PUSHA. They access up to 32 bytes " above"  the stack pointer.
fault is max. 32 byte under the SP
    ((stack_pointer > fault_addr)  && (stack_pointer - fault_addr <= 32)))

We enforce a limit of 192 pages for the stack. It can be adjusted in the source code of exception.c

We attach the user stack pointer to the thread struct during a system call.
This is used to access the user stack pointer even if the page fault is caused inside syscall kernel code.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
We use a monitor lock on some methods as mentioned in earlier questions.
We carefully designed the system and ordered the locking code so that
no deadlock can happen. The interplay between filesystem locking and
page table locking required extra considerations, especially regarding mmap.

When we swap out a frame, no page fault will be triggered when accessing that frame.
If the frame was not physically present yet, it would make no sense to attempt
to swap it out. This is just one example.

One more example is munmap. We modify the SPT and page directory and also write out data from memory to the mapped file in the file system. Because acquiring both the file system lock and the page table lock would provoke a deadlock, we instead used fine-grained locking and introduced a system to pin a page frame in the frame table. This way we lock the page table and mark the frame as pinned. Then we unlock the frame table and lock the file system. Then we can write the frame to the file system and don't have to worry about the frame being evicted. Afterwards we unlock the file system, lock the page table again and remove the SPT entry and page dir entry and physical frame. Then we unlock the page table lock. 

We also introduced fine-grained locking (file lock for the syscall) in the read() and write() syscall handlers. Because of this, those syscalls can now be executed concurrently / reentrant. Therefore we cannot use same global data buffer for all syscalls anymore. We introduced a pre-thread buffer called syscall_temp_buffer in the thread structure. 

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

The first case is handled in frame.c:148-177
We first remove the page table entry of the swapped-out page from the affected
thread before we start the blocking swap-out IO operation. This way a
read from the affected process to that page while it is being swapped out
would cause a page fault. The page fault handler acquires a lock and has
to wait until the other thread is done swapping out the page. Only then may
it start swapping in the page again. The same also holds for frames which
are not swapped out (read-only code pages).

The second case is also covered by our monitor lock of the swapping code
(swap in and out use the same lock).

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Same answer as above: Our code that handles swapping in and swapping out
of frames / pages uses a monitor lock. There can only ever be one process
swapping a page in or out at the same time.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults even in system calls. So a system call like read()
might be interrupted and has to wait until the destination buffer is
swapped in. To prevent deadlocks, we introduced fine-grained locking in 
read and write syscalls. These syscalls make sure not possess the file system lock
while potentially causing a page fault. If this was the case, a deadlock might occur. 
During this time another thread may be run by pintos.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We only have a few locks in our implementation. This is mainly
to make the locking code more simple and avoid pitfalls.  This does limit
multitasking performance in certain cases. 
However, in a couple of places we also use fine-grained locking. Avoiding deadlocks
during nested page faults and syscalls and swapping is tricky and requires much consideration. Using more locks would increase code complexity but allow more simultaneous swapping, lazy code loading and syscalls.
A good example for this is the buffer problem from B5.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

This is the struct for a mapped file (in the tread struct).
struct m_file {
    An id
    int id;

    struct list_elem list_elem;

    The file system file.
    struct file *file;

    Start address of the mapped file.
    uint32_t vaddr;
};

enum spe_status {
    zeroes,
    frame_from_file,
    swap,
    frame,
    mapped_file, <- mapped file frame
    mapped_file_nowriteback,<- mapped file, but modifiable and never written back to file
};

struct spt_entry {
    …
    enum spe_status spe_status;

    If a mapped file, then this is the file on file system.
    struct file *file;

    The file_offset for seek
    size_t file_offset;
    …
};

struct thread {
    …
    struct list mapped_files; A list of "m_files"
    …
}

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

We use the spt for this. Mapped files result in one or more SPT entries
(one for each 4KB piece) with spe_status mapped_file or mapped_file_nowriteback.
When a page faults occurs, we look up the SPT entry and allocate a frame and
write the file contents (usually a 4KB piece somewhere in the file) into the new frame.
We then mark the SPT entry as frame_from_file, indicating that it can be evicted either by simply removing the frame (frame has not been written to) or by writing the frame contents back to the file (frame contents have been written to). The contents can later be read back into a new frame from the file.
We use the same mechanism for lazy-loaded code and data segments. For writable pages
like data segments, we use mapped_file_nowriteback to indicate that the frame has to be written to swap and cannot be read back in from the file once it has initially been loaded.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

The supplemental page table is a hash map. The key is the page address.
The function "spt_file_overlaping" (page.c) needs also the size of
the file.

With the size of the file, we can can compute how many pages we will need
and their address. We can use a simple for loop:

for (unsigned int i = 0; i < file_size; i += PGSIZE)
…

We can iterate over all the affected page addresses in the hash map with "start address" + i, if there is an entry, then it overlaps.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> demand-paged data from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We share most of the code for these two features. The only deviations are explained in the answer above.
We use basically the same code for read-only code segments.
Because code pages cannot be written to, the page table entries will not be dirty and therefore we will never write back the lazy-loaded code into the executable file.
We have slightly different logic for modifiable segments (like data) (status mapped_file_nowriteback) because we do swap those out and do not write changes back to the file system.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

