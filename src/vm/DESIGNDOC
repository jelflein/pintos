		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Jonas Elflein <jonase@coli.uni-saarland.de> 7003378
Benno Krauß <bekr00003@stud.uni-saarland.de> 7009640

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    …
    uint8_t *user_esp; The user stackpointer, this is requeired for a syscall.
    struct list mapped_files; A list of "m_files"
    struct hash spt; The supllemntalpagetable
    …
}

This is a entry for the frametable (an array).

struct frame_entry {
    uint32_t page;
    struct thread *thread;

    uint8_t eviction_score; A score for the evicition policy.
};

The status for the spt.

enum spe_status {
    zeroes,
    frame_from_file,
    swap,
    frame,
    mapped_file,
    mapped_file_nowriteback
};

struct spt_entry {
    enum spe_status spe_status;

    Page address
    uint32_t vaddr;
    pid_t pid;

    If a mapped file, then this is the file on file system.
    struct file *file;

    The file_offset for seek
    size_t file_offset;

    The "size" of the page max. 4096 aka PGSIZE
    size_t  read_bytes;

    The swapslot is the slot on the block device.
    size_t swap_slot;

    If the page wirtable.
    bool writable;

    For the hash table.
    struct hash_elem elem;
};

This is the struct for a mapped file (in the tread struct).
struct m_file {
    An id
    int id;

    struct list_elem list_elem;

    The file system file.
    struct file *file;

    Start address of the mapped file.
    uint32_t vaddr;
};

in swap.c

A bitmap to mangae the swaping slots.
struct bitmap *slots_occupied;

The swaping device / partition.
struct block *device;

in frame.c

The lock for the frame table.
struct lock lock;

The frame table as arrays of structs.
struct frame_entry *frame_table;

uint32_t num_frames_available = 0;
uint32_t num_frames_total = 0;

The index of the page with the smallest eviciton score (next page to evict).
int32_t index_of_smallest_score = -1;

#define ONE_MB (1024*1024)

A macro for the frame table. It compute the index with th address.
#define TABLE_INDEX(addr) (vtop(addr - ONE_MB) >> 12)
The reverse function.
#define ADDR_FROM_TABLE_INDEX(idx) (ptov(idx << 12) + ONE_MB)

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

if a page fault occurs, then we will lookup the fault address in the spt (supplemental page table).

The frame table is an array and the index of the frame entry is a shifted address
with a magic number.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?